package main;

/*Generated by MPS */

import jetbrains.mps.generator.runtime.Generated;
import jetbrains.mps.generator.impl.query.QueryProviderBase;
import jetbrains.mps.generator.template.PropertyMacroContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.generator.template.IfMacroContext;
import jetbrains.mps.generator.template.InsertMacroContext;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SConceptOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.Map;
import jetbrains.mps.generator.impl.query.PropertyValueQuery;
import java.util.HashMap;
import org.jetbrains.annotations.NotNull;
import jetbrains.mps.generator.impl.query.QueryKey;
import org.jetbrains.mps.openapi.language.SProperty;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.generator.impl.GenerationFailureException;
import jetbrains.mps.generator.impl.query.IfMacroCondition;
import jetbrains.mps.generator.impl.query.InsertMacroQuery;
import org.jetbrains.mps.openapi.language.SReferenceLink;
import org.jetbrains.mps.openapi.language.SContainmentLink;

@Generated
public class QueriesGenerated extends QueryProviderBase {
  public QueriesGenerated() {
    super(1);
  }
  public static Object propertyMacro_GetValue_1_0(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), LINKS.command$rfGU), PROPS.name$tAp1) + "Handler";
  }
  public static Object propertyMacro_GetValue_1_1(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), LINKS.command$rfGU), LINKS.aggregate$zByE), PROPS.name$tAp1);
  }
  public static Object propertyMacro_GetValue_1_2(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), LINKS.command$rfGU), PROPS.name$tAp1);
  }
  public static Object propertyMacro_GetValue_1_3(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), LINKS.command$rfGU), LINKS.aggregate$zByE), PROPS.name$tAp1);
  }
  public static Object propertyMacro_GetValue_1_4(final PropertyMacroContext _context) {
    String rootName = SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), LINKS.command$rfGU), LINKS.aggregate$zByE), PROPS.name$tAp1).toLowerCase();
    String call = rootName + ".";
    return call + SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), LINKS.command$rfGU), PROPS.method$W0uD);

  }
  public static Object propertyMacro_GetValue_1_5(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), LINKS.command$rfGU), LINKS.aggregate$zByE), PROPS.name$tAp1);
  }
  public static Object propertyMacro_GetValue_1_6(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), LINKS.command$rfGU), LINKS.aggregate$zByE), PROPS.name$tAp1).toLowerCase();
  }
  public static Object propertyMacro_GetValue_1_7(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), LINKS.command$rfGU), PROPS.name$tAp1);
  }
  public static Object propertyMacro_GetValue_1_8(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), LINKS.command$rfGU), PROPS.name$tAp1) + "Handler";
  }
  public static Object propertyMacro_GetValue_1_9(final PropertyMacroContext _context) {
    return "CommandHandlerBase<" + SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), LINKS.command$rfGU), PROPS.name$tAp1) + ", " + SPropertyOperations.getString(SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), LINKS.command$rfGU), LINKS.aggregate$zByE), PROPS.name$tAp1) + ">";
  }
  public static Object propertyMacro_GetValue_1_10(final PropertyMacroContext _context) {
    return SPropertyOperations.getString(SLinkOperations.getTarget(_context.getNode(), LINKS.command$rfGU), PROPS.name$tAp1) + "Handler.cs";
  }
  public static Object propertyMacro_GetValue_2_0(final PropertyMacroContext _context) {
    for (SNode m : ListSequence.fromList(SLinkOperations.getChildren(_context.getNode(), LINKS.methods$OVv$))) {
      if (SPropertyOperations.getString(m, PROPS.name$tAp1) == ((String) _context.getVariable("name"))) {
        return "." + SPropertyOperations.getString(m, PROPS.name$tAp1);
      }
    }
    return null;
  }
  public static boolean ifMacro_Condition_1_0(final IfMacroContext _context) {
    return SPropertyOperations.getBoolean(_context.getNode(), PROPS.isCreate$WkI1);
  }
  public static boolean ifMacro_Condition_1_1(final IfMacroContext _context) {
    return !(SPropertyOperations.getBoolean(_context.getNode(), PROPS.isCreate$WkI1));
  }
  public static SNode insertMacro_Query_1_0(final InsertMacroContext _context) {
    SNode t = SConceptOperations.createNewNode(MetaAdapterFactory.getConcept(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4ca99f7L, "CsBaseLanguage.structure.StringLiteral"));
    SPropertyOperations.assign(t, PROPS.value$bhsb, SPropertyOperations.getString(ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(SLinkOperations.getTarget(SLinkOperations.getTarget(_context.getNode(), LINKS.command$rfGU), LINKS.aggregate$zByE), LINKS.ctor$dKar), LINKS.formalParameter$n060)).getElement(0), PROPS.name$tAp1));
    return t;
  }
  private final Map<String, PropertyValueQuery> pvqMethods = new HashMap<String, PropertyValueQuery>();
  {
    int i = 0;
    pvqMethods.put("5319286544697329406", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "CommandHandler"));
    pvqMethods.put("5319286544697402998", new PVQ(i++, MetaAdapterFactory.getProperty(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x1b546b82a8c504baL, 0x1b546b82a8c504beL, "referencedGenericTypeParameter"), "Aggregate"));
    pvqMethods.put("5319286544697459280", new PVQ(i++, MetaAdapterFactory.getProperty(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x1b546b82a8c504baL, 0x1b546b82a8c504beL, "referencedGenericTypeParameter"), "CommandType"));
    pvqMethods.put("5319286544697399189", new PVQ(i++, MetaAdapterFactory.getProperty(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x1b546b82a8c504baL, 0x1b546b82a8c504beL, "referencedGenericTypeParameter"), "Aggregate"));
    pvqMethods.put("5319286544698065604", new PVQ(i++, MetaAdapterFactory.getProperty(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x1b546b82a8c504baL, 0x1b546b82a8c504beL, "referencedGenericTypeParameter"), "aggregate"));
    pvqMethods.put("5319286544697662666", new PVQ(i++, MetaAdapterFactory.getProperty(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x1b546b82a8c504baL, 0x1b546b82a8c504beL, "referencedGenericTypeParameter"), "Aggregate"));
    pvqMethods.put("5319286544697668047", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "aggregate"));
    pvqMethods.put("5319286544697691462", new PVQ(i++, MetaAdapterFactory.getProperty(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x1b546b82a8c504baL, 0x1b546b82a8c504beL, "referencedGenericTypeParameter"), "CommandType"));
    pvqMethods.put("5319286544697338070", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "Name"));
    pvqMethods.put("5319286544697358534", new PVQ(i++, MetaAdapterFactory.getProperty(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x1b546b82a8c504baL, 0x1b546b82a8c504beL, "referencedGenericTypeParameter"), "CommandHandlerBase"));
    pvqMethods.put("5319286544697313000", new PVQ(i++, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name"), "CommandHandler"));
    pvqMethods.put("5319286544697849315", new PVQ(i++, MetaAdapterFactory.getProperty(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x1b546b82a8c504baL, 0x1b546b82a8c504beL, "referencedGenericTypeParameter"), "MethodCall"));
  }
  @NotNull
  @Override
  public PropertyValueQuery getPropertyValueQuery(@NotNull QueryKey identity) {
    final String id = identity.getTemplateNode().getNodeId().toString();
    if (!(pvqMethods.containsKey(id))) {
      return super.getPropertyValueQuery(identity);
    }
    return pvqMethods.get(id);
  }
  private static class PVQ extends PropertyValueQuery.Base {
    private final int methodKey;
    /*package*/ PVQ(int methodKey, SProperty property, String templateValue) {
      super(property, templateValue);
      this.methodKey = methodKey;
    }
    @Nullable
    public Object evaluate(@NotNull PropertyMacroContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.propertyMacro_GetValue_1_0(ctx);
        case 1:
          return QueriesGenerated.propertyMacro_GetValue_1_1(ctx);
        case 2:
          return QueriesGenerated.propertyMacro_GetValue_1_2(ctx);
        case 3:
          return QueriesGenerated.propertyMacro_GetValue_1_3(ctx);
        case 4:
          return QueriesGenerated.propertyMacro_GetValue_1_4(ctx);
        case 5:
          return QueriesGenerated.propertyMacro_GetValue_1_5(ctx);
        case 6:
          return QueriesGenerated.propertyMacro_GetValue_1_6(ctx);
        case 7:
          return QueriesGenerated.propertyMacro_GetValue_1_7(ctx);
        case 8:
          return QueriesGenerated.propertyMacro_GetValue_1_8(ctx);
        case 9:
          return QueriesGenerated.propertyMacro_GetValue_1_9(ctx);
        case 10:
          return QueriesGenerated.propertyMacro_GetValue_1_10(ctx);
        case 11:
          return QueriesGenerated.propertyMacro_GetValue_2_0(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, IfMacroCondition> imcMethods = new HashMap<String, IfMacroCondition>();
  {
    int i = 0;
    imcMethods.put("5319286544697659889", new IfMC(i++));
    imcMethods.put("5319286544697675870", new IfMC(i++));
  }
  @NotNull
  @Override
  public IfMacroCondition getIfMacroCondition(@NotNull QueryKey identity) {
    final String id = identity.getTemplateNode().getNodeId().toString();
    if (!(imcMethods.containsKey(id))) {
      return super.getIfMacroCondition(identity);
    }
    return imcMethods.get(id);
  }
  private static class IfMC implements IfMacroCondition {
    private final int methodKey;
    public IfMC(int methodKey) {
      this.methodKey = methodKey;
    }
    @Override
    public boolean check(@NotNull IfMacroContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.ifMacro_Condition_1_0(ctx);
        case 1:
          return QueriesGenerated.ifMacro_Condition_1_1(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no condition method for if macro %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }
  private final Map<String, InsertMacroQuery> imqMethods = new HashMap<String, InsertMacroQuery>();
  {
    imqMethods.put("5319286544697568207", new IMQ(0));
  }
  @NotNull
  @Override
  public InsertMacroQuery getInsertMacroQuery(@NotNull QueryKey queryKey) {
    final String id = queryKey.getTemplateNode().getNodeId().toString();
    if (!(imqMethods.containsKey(id))) {
      return super.getInsertMacroQuery(queryKey);
    }
    return imqMethods.get(id);
  }
  private static class IMQ implements InsertMacroQuery {
    private final int methodKey;
    /*package*/ IMQ(int methodKey) {
      this.methodKey = methodKey;
    }
    @Nullable
    public SNode evaluate(@NotNull InsertMacroContext ctx) throws GenerationFailureException {
      switch (methodKey) {
        case 0:
          return QueriesGenerated.insertMacro_Query_1_0(ctx);
        default:
          throw new GenerationFailureException(String.format("Inconsistent QueriesGenerated: there's no method for query %s (key: #%d)", ctx.getTemplateReference(), methodKey));
      }
    }
  }

  private static final class LINKS {
    /*package*/ static final SReferenceLink command$rfGU = MetaAdapterFactory.getReferenceLink(0x5bea80f0c6164ce6L, 0x8ffcdaee517fa801L, 0x49d1e6edfb310f73L, 0x49d1e6edfb310f85L, "command");
    /*package*/ static final SReferenceLink aggregate$zByE = MetaAdapterFactory.getReferenceLink(0x5bea80f0c6164ce6L, 0x8ffcdaee517fa801L, 0x49d1e6edfb310f74L, 0x49d1e6edfb34349cL, "aggregate");
    /*package*/ static final SContainmentLink methods$OVv$ = MetaAdapterFactory.getContainmentLink(0x5bea80f0c6164ce6L, 0x8ffcdaee517fa801L, 0x49d1e6edfb34348bL, 0x49d1e6edfb3a91f3L, "methods");
    /*package*/ static final SContainmentLink ctor$dKar = MetaAdapterFactory.getContainmentLink(0x5bea80f0c6164ce6L, 0x8ffcdaee517fa801L, 0x49d1e6edfb34348bL, 0x49d1e6edfb34b2daL, "ctor");
    /*package*/ static final SContainmentLink formalParameter$n060 = MetaAdapterFactory.getContainmentLink(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x67e6d2c0669cc2aeL, 0x67e6d2c0669cc2afL, "formalParameter");
  }

  private static final class PROPS {
    /*package*/ static final SProperty name$tAp1 = MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name");
    /*package*/ static final SProperty method$W0uD = MetaAdapterFactory.getProperty(0x5bea80f0c6164ce6L, 0x8ffcdaee517fa801L, 0x49d1e6edfb310f74L, 0x49d1e6edfb3c76b8L, "method");
    /*package*/ static final SProperty isCreate$WkI1 = MetaAdapterFactory.getProperty(0x5bea80f0c6164ce6L, 0x8ffcdaee517fa801L, 0x49d1e6edfb310f73L, 0x49d1e6edfb38093bL, "isCreate");
    /*package*/ static final SProperty value$bhsb = MetaAdapterFactory.getProperty(0xd74e25c94d9143b6L, 0xbad7d18af7bf6674L, 0x5ef9203ea4ca99f7L, 0x2b6e5dd872e34e67L, "value");
  }
}
